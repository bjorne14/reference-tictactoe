#!/bin/bash
#
# Script which builds a project by the build script in the root of the repository and then creates an DockerImage.
# It tags the image with the hash of the commit, if all the steps succeed the commit hash is stored in .env
#
# Author: Björn Ingemar Elfström, based on scaffold from teachers in hgop.

USERNAME="bjorne14"
PROJECT_NAME="tictactoe"
DOCKER_ENV_FILE=".env"
DOCKER_FILE="."

# Helper function for checking error codes of function calls, on error it reports it and exits the script
#   Param1: Return value of function call
#   Param2: Error message to display.
function checkError {
    if [[ $1 != 0 ]]; then
        echo $2
        exit $1
    fi
}

# Initializes the script by getting all necessary repository information
echo "<============== Initializing ==============>"
if [ -z "$GIT_COMMIT" ]; then
    export GIT_COMMIT=$(git rev-parse HEAD)
    export GIT_URL=$(git config --get remote.origin.url)
fi

# Removes .git from url in order to get link to repo(ATH: Assumes a https connection)
export GITHUB_URL=$(echo $GIT_URL | rev | cut -c 5-| rev)
echo -e "Done..\n"

# Builds the project by the build script in the root of the repository.
echo "<================ Building ================>"
./build.sh
checkError $? "Npm build failed with exit code : "$?
echo -e "Done..\nBuild of application was successful, it can be found in ./build\n"

# Builds the Docker container from the Dockerfile.
echo "<============ Building Docker =============>"
docker build -t $USERNAME/$PROJECT_NAME:$GIT_COMMIT $DOCKER_FILE
checkError $? "Docker build failed with exit code : "$?
echo -e "\nDone..\nDocker build of container was successful\n"


# Pushes the new Docker Image to Dockerhub
echo "<========== Pushing Docker Image ==========>"
docker push $USERNAME/$PROJECT_NAME:$GIT_COMMIT
checkError $? "Docker push failed with exit code : "$?
echo -e "\nDone..\nThe Docker Image: "$USERNAME/$PROJECT_NAME:$GIT_COMMIT " was pushed to your Dockerhub"

# If all the steps succeeded, we save the information about the Docker image we created.
cat > $DOCKER_ENV_FILE << _EOF_
VERSION=$GIT_COMMIT
_EOF_

